#include "calpop.h"

/// Main function with memory control and adjoint functions for:
/// computing total exploited biomass at age, which is used to split the
/// observed catch of fisheries without effort data among age classes,
/// and then used in computation of predicted catch without effort
/// Forward functions are in total_exploited_biomass.cpp

void dv_total_exploited_biomass_comp(void);
int save_identifier_string2(char* str);
void verify_identifier_string2(char* str);
void save_long_int_value(unsigned long int x);
unsigned long int restore_long_int_value(void);

void CCalpop::Total_exploited_biomass_comp(
    const PMap& map, VarParamCoupled& param, VarMatrices& mat, const int sp,
    const int t_count) {
    const int nb_fishery = param.get_nbfishery();
    const int a0 = param.sp_a0_adult[sp];
    const int nb_ages = param.sp_nb_cohorts[sp];

    dvar_matrix Sslope;
    Sslope.allocate(map.imin, map.imax, map.jinf, map.jsup);
    Sslope.initialize();

    dvarsSNsum.initialize();

    int k = 0;
    int fne = 0;  // fisheries no effort counter
    for (int f = 0; f < nb_fishery; f++) {
        if (param.mask_fishery_sp[sp][f]) {
            if (param.mask_fishery_sp_no_effort[sp][f]) {
                Sslope = param.dvarsSslope_sp_fishery[sp][k];
                // re-use dvarsU and dvarsV for selectivity parameters
                mat.dvarsU.initialize();
                mat.dvarsV.initialize();
                if (param.s_func_type[f] > 1) {
                    // Slength:
                    mat.dvarsU = param.dvarsSlength_sp_fishery[sp][k];
                    if (param.s_func_type[f] == 3)
                        // Sasympt:
                        mat.dvarsV = param.dvarsSasympt_sp_fishery[sp][k];
                }

                for (int age = a0; age < nb_ages; age++) {
                    total_exploited_biomass_comp(
                        map.carte, value(mat.dvarDensity(sp, age)),
                        mat.catch_obs[sp][k], f, fne, age, sp);
                    save_identifier_string2(
                        (char*)"total_exploited_biomass_comp_begin");
                    Sslope.save_dvar_matrix_position();
                    mat.dvarsU.save_dvar_matrix_position();
                    mat.dvarsV.save_dvar_matrix_position();
                    dvarsSNsum(fne).save_dvar_matrix_position();
                    mat.dvarDensity(sp, age).save_dvar_matrix_position();
                    save_double_value(Selectivity(sp, f, age));
                    save_int_value(t_count);
                    save_int_value(sp);
                    save_int_value(age);
                    save_int_value(f);
                    save_int_value(k);
                    unsigned long int cmat = (unsigned long int)&mat;
                    save_long_int_value(cmat);
                    unsigned long int pmap = (unsigned long int)&map;
                    save_long_int_value(pmap);
                    unsigned long int cparam = (unsigned long int)&param;
                    save_long_int_value(cparam);
                    save_identifier_string2(
                        (char*)"total_exploited_biomass_comp_end");

                    gradient_structure::GRAD_STACK1->set_gradient_stack(
                        dv_total_exploited_biomass_comp);
                }
                fne++;
            }
            k++;
        }
    }
}

void dv_total_exploited_biomass_comp(void) {
    verify_identifier_string2((char*)"total_exploited_biomass_comp_end");
    unsigned long int pos_param = restore_long_int_value();
    unsigned long int pos_map = restore_long_int_value();
    unsigned long int pos_mat = restore_long_int_value();
    unsigned k = restore_int_value();
    unsigned f = restore_int_value();
    unsigned age = restore_int_value();
    unsigned sp = restore_int_value();
    unsigned t_count = restore_int_value();
    const double selectivity = restore_double_value();
    const dvar_matrix_position uu_pos = restore_dvar_matrix_position();
    const dvar_matrix_position SNsum_pos = restore_dvar_matrix_position();
    const dvar_matrix_position s_asy_pos = restore_dvar_matrix_position();
    const dvar_matrix_position s_len_pos = restore_dvar_matrix_position();
    const dvar_matrix_position sslope_pos = restore_dvar_matrix_position();
    verify_identifier_string2((char*)"total_exploited_biomass_comp_begin");

    PMap* map = (PMap*)pos_map;
    CParam* param = (CParam*)pos_param;
    CMatrices* mat = (CMatrices*)pos_mat;

    const int s_func_type = param->s_func_type[f];

    dmatrix dfuu = restore_dvar_matrix_derivatives(uu_pos);
    dmatrix dfss = restore_dvar_matrix_derivatives(sslope_pos);
    dmatrix dfsl = restore_dvar_matrix_derivatives(s_len_pos);
    dmatrix dfsa = restore_dvar_matrix_derivatives(s_asy_pos);
    dmatrix dfSNsum = restore_dvar_matrix_derivatives(SNsum_pos);
    // dmatrix dfSNsum_pr  = restore_dvar_matrix_derivatives(SNsum_pr_pos);

    dmatrix uu;
    uu.allocate(map->imin1, map->imax1, map->jinf1, map->jsup1);
    uu = mat->density_before(sp, t_count, age);

    double dflength, dfslope, dfasympt;
    param->dfselectivity(dfslope, dflength, dfasympt, sp, age, f, k);

    const int jmax = map->jmax;
    const int jmin = map->jmin;
    for (int j = jmax; j >= jmin; j--) {
        const int imin = map->iinf[j];
        const int imax = map->isup[j];
        for (int i = imax; i >= imin; i--) {
            if (map->carte(i, j)) {
                // SNsum(fne,i,j) = SNsum_pr(fne,i,j) + selectivity*density;
                double dfS = uu(i, j) * dfSNsum(i, j);
                dfuu(i, j) += selectivity * dfSNsum(i, j);
                // dfSNsum_pr(i,j) += dfSNsum(i,j);
                // dfSNsum(i,j)     = 0.0;

                // selectivity = selectivity_comp(age,f,k);
                dfss(i, j) += dfslope * dfS;
                if (s_func_type > 1) dfsl(i, j) += dflength * dfS;
                if (s_func_type == 3) dfsa(i, j) += dfasympt * dfS;
                dfS = 0.0;
            }
        }
    }
    // dfSNsum_pr.save_dmatrix_derivatives(SNsum_pr_pos);
    dfSNsum.save_dmatrix_derivatives(SNsum_pos);
    dfuu.save_dmatrix_derivatives(uu_pos);
    dfss.save_dmatrix_derivatives(sslope_pos);
    dfsl.save_dmatrix_derivatives(s_len_pos);
    dfsa.save_dmatrix_derivatives(s_asy_pos);
}

#include "calpop.h"

/// Forward main function called in simulation mode only for:
/// computing total exploited biomass at age, which is used to split the
/// observed catch of fisheries without effort data among age classes,
/// and then used in computation of predicted catch without effort
/// See total_exploited_biomass.cpp

void CCalpop::Total_exploited_biomass_comp(
    const PMap& map, VarParamCoupled& param, VarMatrices& mat, const int sp,
    const int t_count) {
    const int nb_fishery = param.get_nbfishery();
    const int a0 = param.sp_a0_adult[sp];
    const int nb_ages = param.sp_nb_cohorts[sp];

    dvar_matrix Sslope;
    Sslope.allocate(map.imin, map.imax, map.jinf, map.jsup);
    Sslope.initialize();

    dvarsSNsum.initialize();

    int k = 0;
    int fne = 0;  // fisheries no effort counter
    for (int f = 0; f < nb_fishery; f++) {
        if (param.mask_fishery_sp[sp][f]) {
            if (param.mask_fishery_sp_no_effort[sp][f]) {
                Sslope = param.dvarsSslope_sp_fishery[sp][k];
                // re-use dvarsU and dvarsV for selectivity parameters
                mat.dvarsU.initialize();
                mat.dvarsV.initialize();
                if (param.s_func_type[f] > 1) {
                    // Slength:
                    mat.dvarsU = param.dvarsSlength_sp_fishery[sp][k];
                    if (param.s_func_type[f] == 3)
                        // Sasympt:
                        mat.dvarsV = param.dvarsSasympt_sp_fishery[sp][k];
                }

                for (int age = a0; age < nb_ages; age++) {
                    total_exploited_biomass_comp(
                        map.carte, value(mat.dvarDensity(sp, age)),
                        mat.catch_obs[sp][k], f, fne, age, sp);
                }
                fne++;
            }
            k++;
        }
    }
}
